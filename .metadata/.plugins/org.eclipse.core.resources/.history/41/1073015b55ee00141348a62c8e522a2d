package xTest;

import java.util.Arrays;

public class Test {

	private static boolean DEBUG = false;

	public static void main(String[] args) {
		if (DEBUG) {
			// TODO Auto-generated method stub
			int[] test0 = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
			;
			System.out.println(Arrays.toString(test0) + " =>  "
					+ Arrays.toString(rotate(test0, 6)));
		} else {
			int[] test = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
			checkArray(test, 15);
			int[] test2 = { 0, 1, 2, 3 };
			checkArray(test2, 6);
			int[] test3 = { 0 };
			checkArray(test3, 3);
			int[] test4 = { 0, 8 };
			checkArray(test4, 4);
			int[] test5 = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
			checkArray(test5, 10);
			int[] test6 = { 1, 2, 3, 4, 5, 6, 7, 8 };
			checkArray(test6, 16);
			int[] test7 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
					16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
					31, 32 };
			checkArray(test7, 16);
		}
	}

	private static void checkArray(int[] testArray, int n) {
		System.out.println("Init Array : " + Arrays.toString(testArray) + "\n");
		for (int i = 0; i < n; i++) {
			int[] res = rotate(testArray, i);
			System.out.print("Shift : " + i + "  "
					+ Arrays.toString(rotate(testArray, i)));
			boolean toutOK = true;
			int positionA = -87;
			int positionB = -48;
			for (int j = 0; j < testArray.length; j++) {
				int a = calculerPosition(j + i, testArray.length);
				if (res[a] != testArray[j]) {
					toutOK = false;
					positionA = a;
					positionB = j;
					break;
				}
			}

			if (toutOK) {
				System.out.println(" - OK");

			} else {
				System.out.println(" - KO *** Indice : " + positionA + " *** "
						+ res[positionA] + " != " + testArray[positionB]);
			}
		}
		System.out.println();
	}

	public static int[] rotate(int[] c, int n) {
		int[] cadran = c.clone(); // TODO
		int length = cadran.length;

		n = ((n % length) + length) % length;

		int i = 0, j = i, pgdc = pgcd(n, length), tempElement = cadran[i];

		while (i < pgdc) {
			// System.out.println(Arrays.toString(cadran));
			int position = j + n;

			if (position >= length) {
				position = position - length;
			}

			if (position == i) {
				cadran[j] = tempElement;
				i++;
				if (i < length) {
					cadran[j] = cadran[position];
					tempElement = cadran[i];
					j = i;
				}
				continue;
			}

			cadran[j] = cadran[position];
			j = position;
		}
		return cadran;
	}

	public static int[] rotateLeft(int[] c, int n) {
		int[] cadran = c.clone(); // TODO
		int length = cadran.length;

		n = ((n % length) + length) % length;

		int i = 0, j = i, pgdc = pgcd(n, length), tempElement = cadran[i];

		while (i < pgdc) {
			// System.out.println(Arrays.toString(cadran));
			int position = j + n;

			if (position >= length) {
				position = position - length;
			}

			if (position == i) {
				cadran[j] = tempElement;
				i++;
				if (i < length) {
					cadran[j] = cadran[position];
					tempElement = cadran[i];
					j = i;
				}
				continue;
			}

			cadran[j] = cadran[position];
			j = position;
		}
		return cadran;
	}

	private static int calculerPosition(int position, int size) {
		return position % size;
	}

	private static int pgcd(int a, int b) {
		if (b == 0) {
			return a;
		} else {
			return pgcd(b, a % b);
		}
	}
}